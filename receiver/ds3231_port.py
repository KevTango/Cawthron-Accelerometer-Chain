# ds3231_port.py Portable driver for DS3231 precison real time clock.# Adapted from WiPy driver at https://github.com/scudderfish/uDS3231# Author: Peter Hinch# Copyright Peter Hinch 2018 Released under the MIT license.import utimeimport machineimport sysimport pybimport timeDS3231_I2C_ADDR = 104class DS3231Exception(OSError):    passif sys.platform == 'pyboard':  print('Pyboard connected')  pyb.LED(4).on()  time.sleep(1)  pyb.LED(4).off()else:    try:      rtc = machine.RTC()      print('Pyboard is the intended device, please change microcontroller immediately')    except:  # Official ESP32 port      rtc = None      print('Pyboard is the intended device, please change microcontroller immediately')def bcd2dec(bcd):    return (((bcd & 0xf0) >> 4) * 10 + (bcd & 0x0f))def dec2bcd(dec):    tens, units = divmod(dec, 10)    return (tens << 4) + unitsdef tobytes(num):    return num.to_bytes(1, 'little')class DS3231:    def __init__(self, i2c):        self.ds3231 = i2c        self.timebuf = bytearray(7)        if DS3231_I2C_ADDR not in self.ds3231.scan():            raise DS3231Exception("DS3231 not found on I2C bus at %d" % DS3231_I2C_ADDR)          # Returns hour    def get_hour(self):      if set_rtc:        self.await_transition()      # For accuracy set RTC immediately after a seconds transition      else:        self.ds3231.readfrom_mem_into(DS3231_I2C_ADDR, 0, self.timebuf) # don't wait      return self.convert_hour(set_rtc)      def convert_hour(self, set_rtc=False):      data = self.timebuf      if data[2] & 0x40:        hh = bcd2dec(data[2] & 0x1f)        if data[2] & 0x20:          hh += 12      else:        hh = bcd2dec(data[2])      return hh          # Returns minutes    def get_minute(self, set_rtc=False):      if set_rtc:        self.await_transition()      # For accuracy set RTC immediately after a seconds transition      else:        self.ds3231.readfrom_mem_into(DS3231_I2C_ADDR, 0, self.timebuf) # don't wait      return self.convert_minute(set_rtc)          def convert_minute(self, set_rtc=False):      data = self.timebuf      mm = bcd2dec(data[1])      return mm          # Returns seconds      def get_second(self, set_rtc=False):      if set_rtc:        self.await_transition()      # For accuracy set RTC immediately after a seconds transition      else:        self.ds3231.readfrom_mem_into(DS3231_I2C_ADDR, 0, self.timebuf) # don't wait      return self.convert_second(set_rtc)          def convert_second(self, set_rtc=False):      data = self.timebuf      ss = bcd2dec(data[0])      return ss          # Returns day    def get_day(self, set_rtc=False):      if set_rtc:        self.await_transition()      # For accuracy set RTC immediately after a seconds transition      else:        self.ds3231.readfrom_mem_into(DS3231_I2C_ADDR, 0, self.timebuf) # don't wait      return self.convert_day(set_rtc)           def convert_day(self, set_rtc=False):      data = self.timebuf      DD = bcd2dec(data[4])      return DD       # Returns month     def get_month(self, set_rtc=False):      if set_rtc:        self.await_transition()      # For accuracy set RTC immediately after a seconds transition      else:        self.ds3231.readfrom_mem_into(DS3231_I2C_ADDR, 0, self.timebuf) # don't wait      return self.convert_month(set_rtc)         def convert_month(self, set_rtc=False):      data = self.timebuf      MM = bcd2dec(data[5] & 0x1f)      return MM        # Returns year    def get_year(self, set_rtc=False):      if set_rtc:        self.await_transition()      # For accuracy set RTC immediately after a seconds transition      else:        self.ds3231.readfrom_mem_into(DS3231_I2C_ADDR, 0, self.timebuf) # don't wait      return self.convert_year(set_rtc)          def convert_year(self, set_rtc=False):      data = self.timebuf      YY = bcd2dec(data[6])      if data[5] & 0x80:        YY += 2000      else:        YY += 1900      return YY          def get_time(self, set_rtc = False):        if set_rtc:            self.await_transition()      # For accuracy set RTC immediately after a seconds transition        else:            self.ds3231.readfrom_mem_into(DS3231_I2C_ADDR, 0, self.timebuf) # don't wait        return self.convert(set_rtc)    def convert(self, set_rtc=False):  # Return a tuple in localtime() format (less yday)        data = self.timebuf        ss = bcd2dec(data[0])        mm = bcd2dec(data[1])        if data[2] & 0x40:            hh = bcd2dec(data[2] & 0x1f)            if data[2] & 0x20:                hh += 12        else:            hh = bcd2dec(data[2])        wday = data[3]        DD = bcd2dec(data[4])        MM = bcd2dec(data[5] & 0x1f)        YY = bcd2dec(data[6])        if data[5] & 0x80:            YY += 2000        else:            YY += 1900        # Time from DS3231 in time.localtime() format (less yday)        result = YY, MM, DD, hh, mm, ss, wday -1, 0        if set_rtc:            if rtc is None:                # Best we can do is to set local time                secs = utime.mktime(result)                utime.localtime(secs)            else:                if sys.platform == 'pyboard' or sys.platform == 'esp8266':                    rtc.datetime((YY, MM, DD, wday, hh, mm, ss, 0))                else:                    rtc.init((YY, MM, DD, hh, mm, ss))        return result    def save_time(self):        (YY, MM, mday, hh, mm, ss, wday, yday) = utime.localtime()  # Based on RTC        self.ds3231.writeto_mem(DS3231_I2C_ADDR, 0, tobytes(dec2bcd(ss)))        self.ds3231.writeto_mem(DS3231_I2C_ADDR, 1, tobytes(dec2bcd(mm)))        self.ds3231.writeto_mem(DS3231_I2C_ADDR, 2, tobytes(dec2bcd(hh)))  # Sets to 24hr mode        self.ds3231.writeto_mem(DS3231_I2C_ADDR, 3, tobytes(dec2bcd(wday + 1)))  # 1 == Monday, 7 == Sunday        self.ds3231.writeto_mem(DS3231_I2C_ADDR, 4, tobytes(dec2bcd(mday)))  # Day of month        if YY >= 2000:            self.ds3231.writeto_mem(DS3231_I2C_ADDR, 5, tobytes(dec2bcd(MM) | 0b10000000))  # Century bit            self.ds3231.writeto_mem(DS3231_I2C_ADDR, 6, tobytes(dec2bcd(YY-2000)))        else:            self.ds3231.writeto_mem(DS3231_I2C_ADDR, 5, tobytes(dec2bcd(MM)))            self.ds3231.writeto_mem(DS3231_I2C_ADDR, 6, tobytes(dec2bcd(YY-1900)))